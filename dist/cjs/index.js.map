{"version":3,"file":"index.js","sources":["../../node_modules/style-inject/dist/style-inject.es.js","../../src/components/Modal/Modal.tsx","../../src/components/Dropdown/Dropdown.tsx","../../src/components/Table/Table.tsx"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import React, { FormEvent, useState } from 'react'\r\n\r\nimport styles from './Modal.module.css'\r\n\r\ninterface ModalProps {\r\n    message?: string[]\r\n    label?: string\r\n    confirm?: (e: FormEvent) => void\r\n    close?: (e: FormEvent) => void\r\n\r\n    overlay?: boolean\r\n    fFam?: string\r\n    fSize?: string\r\n    fCol?: string\r\n\r\n    bg?: string\r\n    pad?: string\r\n    width?: string\r\n    bordW?: string\r\n    bordC?: string\r\n    bordR?: string\r\n    lineHeight?: string\r\n\r\n    bfFam?: string\r\n    bfSize?: string\r\n    bfCol?: string\r\n    bbg?: string\r\n    bpad?: string\r\n    bwidth?: string\r\n    bbordW?: string\r\n    bbordC?: string\r\n    bbordR?: string\r\n    hoverBg?: string\r\n    hoverCol?: string\r\n}\r\n\r\nconst Modal: React.FC<ModalProps> = (props) => {\r\n    const [isHover, setIsHover] = useState(false)\r\n\r\n    const {\r\n        message,\r\n        label,\r\n        confirm,\r\n        close,\r\n        overlay,\r\n        fFam,\r\n        fSize,\r\n        fCol,\r\n        bg,\r\n        pad,\r\n        width,\r\n        bordW,\r\n        bordC,\r\n        bordR,\r\n        lineHeight,\r\n        bfSize,\r\n        bfFam,\r\n        bfCol,\r\n        bbg,\r\n        bpad,\r\n        bwidth,\r\n        bbordW,\r\n        bbordC,\r\n        bbordR,\r\n        hoverBg,\r\n        hoverCol,\r\n    } = props\r\n\r\n    const modalStyle = {\r\n        background: bg,\r\n        padding: pad,\r\n        width: width,\r\n        borderWidth: bordW,\r\n        borderColor: bordC,\r\n        borderRadius: bordR,\r\n    }\r\n\r\n    const messageContainerStyle = {\r\n        lineHeight: lineHeight\r\n    }\r\n\r\n    const btnStyle = {\r\n        background: isHover ? hoverBg ?? bbg ?? bg : bbg ?? bg,\r\n        fontFamily: bfFam ?? fFam,\r\n        fontSize: bfSize ?? fSize,\r\n        color: isHover ? hoverCol ?? bfCol ?? fCol : bfCol ?? fCol,\r\n        padding: bpad ?? pad,\r\n        borderWidth: bbordW ?? bordW,\r\n        borderColor: bbordC ?? bordC,\r\n        borderRadius: bbordR ?? bordR,\r\n        width: bwidth,\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={overlay ? styles.overlay : ''}\r\n            style={{ fontFamily: fFam, fontSize: fSize, color: fCol }}\r\n        >\r\n            <div className={styles.modal} style={modalStyle}>\r\n                {close && (\r\n                    <button\r\n                        className={styles.closeBtn}\r\n                        onClick={close}\r\n                        style={{ color: fCol }}\r\n                    >\r\n                        âœ•\r\n                    </button>\r\n                )}\r\n                {message && (\r\n                    <div className={styles.messagesContainer} style={messageContainerStyle}>\r\n                        {message.map((mess, idx) => (\r\n                            <div key={'mess' + idx} className={styles.message}>\r\n                                {mess}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                )}\r\n\r\n                {confirm && (\r\n                    <button\r\n                        className={styles.confirmBtn}\r\n                        onClick={confirm}\r\n                        style={btnStyle}\r\n                        onMouseEnter={() => setIsHover(true)}\r\n                        onMouseLeave={() => setIsHover(false)}\r\n                    >\r\n                        {label ?? 'OK'}\r\n                    </button>\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Modal\r\n","import React, { useState } from 'react'\r\nimport styles from './Dropdown.module.css'\r\n\r\ninterface DropdownProps {\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    selectItem: (name: string, value: any) => void\r\n    items: (number | string)[]\r\n    currentValue?: string | number | null\r\n    dataName?: string\r\n    dataLabel?: string\r\n\r\n    width?: string\r\n    height?: string\r\n    fFam?: string\r\n    fSize?: string\r\n    fCol?: string\r\n    textAlign?: 'center' | 'right' | 'left'\r\n    underline?: boolean\r\n\r\n    lBg?: string\r\n    lWidth?: string\r\n    lHeight?: string\r\n    lBordW?: string\r\n    lBordC?: string\r\n    lBordR?: string\r\n    greyLine?: boolean\r\n    itemPad?: string\r\n}\r\n\r\nconst Dropdown: React.FC<DropdownProps> = (props) => {\r\n    const {\r\n        selectItem,\r\n        items,\r\n        currentValue,\r\n        dataName,\r\n        dataLabel,\r\n\r\n        width,\r\n        height,\r\n        fFam,\r\n        fSize,\r\n        fCol,\r\n        textAlign,\r\n        underline,\r\n\r\n        lBg,\r\n        lWidth,\r\n        lHeight,\r\n        lBordW,\r\n        lBordC,\r\n        lBordR,\r\n\r\n        greyLine,\r\n        itemPad,\r\n    } = props\r\n\r\n    const line = underline ?? 'true'\r\n\r\n    const wborder = line\r\n        ? `${lBordW ?? '2px'} solid ${lBordC ?? 'black'}`\r\n        : 'none'\r\n\r\n    const wrapperStyle = {\r\n        fontFamily: fFam,\r\n        fontSize: fSize,\r\n        color: fCol,\r\n        width: width,\r\n        height: height,\r\n        borderBottom: wborder,\r\n    }\r\n\r\n    const listStyle = {\r\n        background: lBg,\r\n        width: lWidth,\r\n        hegiht: lHeight,\r\n        borderWidth: lBordW,\r\n        borderColor: lBordC,\r\n        borderRadius: lBordR,\r\n        color: fCol,\r\n    }\r\n\r\n    const valueStyle = {\r\n        textAlign: textAlign,\r\n        color: fCol,\r\n    }\r\n\r\n    const eltStyle = {\r\n        padding: itemPad,\r\n    }\r\n\r\n    const grayed = greyLine ?? true\r\n\r\n    const [isDropped, setIsDropped] = useState(false)\r\n\r\n    const handleClick = () => {\r\n        setIsDropped(!isDropped)\r\n    }\r\n\r\n    const handleSelect = (item: string | number) => {\r\n        selectItem(dataName ?? '', item.toString())\r\n        setIsDropped(false)\r\n    }\r\n\r\n    return (\r\n        <div className={styles.dropdown} style={wrapperStyle}>\r\n            {dataLabel && <div>{dataLabel} :</div>}\r\n            <div\r\n                className={\r\n                    styles.value + ' ' + (isDropped ? styles.dropped : '')\r\n                }\r\n                onClick={handleClick}\r\n                style={valueStyle}\r\n            >\r\n                {currentValue ?? 'select'}\r\n\r\n                {isDropped && (\r\n                    <ul className={styles.list} style={listStyle}>\r\n                        {items.map((item, key) => (\r\n                            <li\r\n                                key={'li' + key}\r\n                                onClick={() => handleSelect(item)}\r\n                                style={{\r\n                                    ...eltStyle,\r\n                                    ...(grayed\r\n                                        ? key % 2 === 0\r\n                                            ? { background: '#d9d9d9bb' }\r\n                                            : {}\r\n                                        : {}),\r\n                                }}\r\n                            >\r\n                                {item}\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dropdown","/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport React, { FormEvent, Fragment, useEffect, useState } from 'react'\r\nimport Dropdown from '../Dropdown'\r\nimport styles from './Table.module.css'\r\nimport Modal from '../Modal'\r\n\r\ninterface TableProps {\r\n    title?: string\r\n    headingNames?: { [key: string]: string } | null\r\n    data: { [key: string]: string | number | null}[]\r\n    closeUp?: boolean\r\n    background?: string\r\n\r\n    width?: string\r\n    fFam?: string\r\n    fSize?: string\r\n    fCol?: string\r\n\r\n    tableFCol?: string\r\n    tBordW?: string\r\n    tBordC?: string\r\n    tBordR?: string\r\n\r\n    greyLine?: boolean\r\n\r\n    prevTxt?: string\r\n    nextTxt?: string\r\n    buttonEllipsis?: boolean\r\n}\r\n\r\nexport const Table: React.FC<TableProps> = (props) => {\r\n    const {\r\n        title,\r\n        headingNames,\r\n        data,\r\n        closeUp,\r\n        background,\r\n        tBordW,\r\n        tBordC,\r\n        tBordR,\r\n        width,\r\n        fFam,\r\n        fSize,\r\n        fCol,\r\n        tableFCol,\r\n        greyLine,\r\n        prevTxt,\r\n        nextTxt,\r\n        buttonEllipsis,\r\n    } = props\r\n\r\n    // ========================================\r\n    // set the headings\r\n    // ========================================\r\n\r\n    const headings: { [key: string]: string } = {}\r\n\r\n    headingNames\r\n        ? Object.keys(headingNames).forEach((data) => {\r\n              headings[data] = headingNames[data]\r\n          })\r\n        : Object.keys(data[0]).forEach((data) => {\r\n              headings[data] = data\r\n          })\r\n\r\n    // ========================================\r\n    // sort data by clicking on the table header\r\n    // ========================================\r\n\r\n    const [displayedData, setDisplayedData] = useState(data)\r\n\r\n    const [sortedData, setSortedData] = useState(displayedData)\r\n\r\n    const [sortedKey, setSortedKey] = useState({ key: '', asc: false })\r\n\r\n    const handleSort = (key: string) => {\r\n        // get the column key\r\n        setCurrentPage(1)\r\n\r\n        sortedKey.key === key\r\n            ? setSortedKey((prevSortedKey) => ({\r\n                  ...prevSortedKey,\r\n                  asc: !prevSortedKey.asc,\r\n              }))\r\n            : setSortedKey({ key: key, asc: false })\r\n    }\r\n\r\n    useEffect(() => {\r\n        const tmpData = [...displayedData].sort((a: any, b: any) => {\r\n            if (a[sortedKey.key] > b[sortedKey.key])\r\n                return sortedKey.asc ? 1 : -1\r\n            if (a[sortedKey.key] < b[sortedKey.key])\r\n                return sortedKey.asc ? -1 : 1\r\n            return 0\r\n        })\r\n\r\n        setSortedData(tmpData)\r\n    }, [sortedKey, displayedData])\r\n\r\n    // ========================================\r\n    // number of entries shown\r\n    // ========================================\r\n\r\n    const [displayingQty, setDisplayingQty] = useState(10)\r\n\r\n    const handleSelectQty = (_id: string, value: number) => {\r\n        setDisplayingQty(value)\r\n        setCurrentPage(1)\r\n    }\r\n\r\n    // ========================================\r\n    // Page navigation\r\n    // ========================================\r\n\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [pagesQty, setPagesQty] = useState(0)\r\n\r\n    useEffect(() => {\r\n        setPagesQty(Math.ceil(displayedData.length / displayingQty))\r\n    }, [displayingQty, displayedData, pagesQty])\r\n\r\n    const handleSelectPage = (idx: number) => {\r\n        setCurrentPage(idx)\r\n    }\r\n\r\n    // navigation form prev / next button\r\n    const handleNavPage = (dir: number) => {\r\n        let tempPage = currentPage\r\n        tempPage += dir\r\n        tempPage > 0 && tempPage <= pagesQty && setCurrentPage(tempPage)\r\n    }\r\n\r\n    const ellipsis = buttonEllipsis ?? 'true'\r\n\r\n    // ========================================\r\n    // Searchbar\r\n    // ========================================\r\n\r\n    const [searchInput, setSearchInput] = useState('')\r\n\r\n    const handleInput = (e: FormEvent) => {\r\n        const target = e.target as HTMLFormElement\r\n        setCurrentPage(1)\r\n        setSearchInput(target.value)\r\n    }\r\n\r\n    useEffect(() => {\r\n        dataSearching(searchInput.toString())\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [searchInput])\r\n\r\n    const dataSearching = (word: string) => {\r\n        const searchedWord = word.toLowerCase()\r\n\r\n        const tempData: React.SetStateAction<{ [key: string]: any }[]> = []\r\n\r\n        props.data.forEach((data) => {\r\n            const keys: string[] = Object.keys(data)\r\n            let match = false\r\n            keys.forEach((key) => {\r\n                const myData = data[key] ?? '' //prevent nullish data\r\n                if (!match) {\r\n                    const wordToCompare = myData.toString().toLowerCase()\r\n                    if (wordToCompare.match(searchedWord)) {\r\n                        tempData.push(data)\r\n                        match = true\r\n                    }\r\n                }\r\n            })\r\n        })\r\n\r\n        setDisplayedData(tempData)\r\n    }\r\n\r\n    // ========================================\r\n    // closeUp : get infos by clicking on the line\r\n    // ========================================\r\n\r\n    const [infosSelected, setInfosSelected] = useState([''])\r\n\r\n    const [infosShown, setInfosShown] = useState(false)\r\n\r\n    const openOverlay = closeUp ?? true\r\n\r\n    const handleClick = (data: any) => {\r\n        const tmpArray: any[] = []\r\n\r\n        {\r\n            Object.keys(headings).map((key) => {\r\n                const keyData = data[key as keyof typeof data] ?? '---'\r\n                tmpArray.push(headings[key] + ': ' + keyData)\r\n            })\r\n        }\r\n\r\n        setInfosSelected(tmpArray)\r\n\r\n        showModal()\r\n    }\r\n\r\n    const showModal = () => {\r\n        setInfosShown(!infosShown)\r\n    }\r\n\r\n    // ========================================\r\n    // custom style\r\n    // ========================================\r\n\r\n    const grayed = greyLine ?? 'true'\r\n\r\n    const globalStyle = {\r\n        fontFamily: fFam,\r\n        color: fCol,\r\n        fontSize: fSize,\r\n    }\r\n\r\n    const tableStyle = {\r\n        width: width,\r\n        borderWidth: tBordW,\r\n        borderColor: tBordC,\r\n        borderRadius: tBordR,\r\n        background: background,\r\n        color: tableFCol,\r\n    }\r\n\r\n    const lineStyle = {\r\n        cursor: openOverlay ? 'pointer' : 'default',\r\n    }\r\n\r\n    const btnStyle = {\r\n        color: tableFCol,\r\n        fontSize: fSize,\r\n        background: background,\r\n    }\r\n\r\n    return (\r\n        <section className={styles.section} style={globalStyle}>\r\n            <div className={styles.entriesDisplayed}>\r\n                <span className={styles.dropdown}>\r\n                    Show\r\n                    <Dropdown\r\n                        items={[10, 25, 50, 100]}\r\n                        selectItem={handleSelectQty}\r\n                        currentValue={displayingQty.toString()}\r\n                        width=\"75px\"\r\n                        textAlign=\"center\"\r\n                        fCol={fCol}\r\n                        fSize={fSize}\r\n                        fFam={fFam}\r\n                        lBordW={tBordW ?? '2px'}\r\n                    />\r\n                    entries\r\n                </span>\r\n                <form className={styles.form}>\r\n                    <label htmlFor=\"HRNet-Table-search\">search</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"HRNet-Table-search\"\r\n                        id=\"HRNet-Table-search\"\r\n                        value={searchInput}\r\n                        onInput={handleInput}\r\n                    />\r\n                </form>\r\n            </div>\r\n\r\n            <table className={styles.table}>\r\n                <caption>{title ?? ''}</caption>\r\n                <tbody style={tableStyle}>\r\n                    <tr>\r\n                        {Object.keys(headings).map((name: string, idx) => (\r\n                            <th\r\n                                scope=\"col\"\r\n                                key={'col' + idx}\r\n                                onClick={() => handleSort(name)}\r\n                                className={styles.heading}\r\n                            >\r\n                                {headings[name]}{' '}\r\n                                {name === sortedKey.key &&\r\n                                    (sortedKey.asc ? 'â–²' : 'â–¼')}\r\n                            </th>\r\n                        ))}\r\n                    </tr>\r\n                    {sortedData.map(\r\n                        (data, rowIdx) =>\r\n                            rowIdx >= (currentPage - 1) * displayingQty &&\r\n                            rowIdx < currentPage * displayingQty && (\r\n                                <tr\r\n                                    key={'row' + rowIdx + 1}\r\n                                    onClick={() =>\r\n                                        openOverlay && handleClick(data)\r\n                                    }\r\n                                    className={grayed ? styles.grayed : ''}\r\n                                    style={lineStyle}\r\n                                >\r\n                                    {Object.keys(headings).map(\r\n                                        (key, colIdx) => (\r\n                                            <td\r\n                                                scope=\"col\"\r\n                                                key={\r\n                                                    'row' +\r\n                                                    rowIdx +\r\n                                                    'col' +\r\n                                                    colIdx\r\n                                                }\r\n                                            >\r\n                                                {data[key as keyof typeof data]}\r\n                                            </td>\r\n                                        )\r\n                                    )}\r\n                                </tr>\r\n                            )\r\n                    )}\r\n                </tbody>\r\n            </table>\r\n\r\n            <div className={styles.tableNavigation}>\r\n                <span>\r\n                    Showing {(currentPage - 1) * displayingQty + 1} to{' '}\r\n                    {currentPage === pagesQty\r\n                        ? displayedData.length\r\n                        : currentPage * displayingQty}{' '}\r\n                    of {displayedData.length} entries\r\n                </span>\r\n                <div className={styles.pageSelection}>\r\n                    <button\r\n                        className={currentPage === 1 ? styles.disabled : ''}\r\n                        onClick={() => handleNavPage(-1)}\r\n                        style={btnStyle}\r\n                    >\r\n                        {prevTxt ?? 'prev'}\r\n                    </button>\r\n\r\n                    {/* page selection */}\r\n\r\n                    {Array.from(Array(pagesQty)).map((_, idx) => (\r\n                        <Fragment key={'pageNavigation' + idx}>\r\n                            {!ellipsis ||\r\n                            pagesQty < 7 ||\r\n                            Math.abs(currentPage - idx - 1) < 3 ||\r\n                            (currentPage <= 2 && idx <= 4) ||\r\n                            (currentPage >= pagesQty - 2 &&\r\n                                idx > pagesQty - 6) ||\r\n                            idx === 0 ||\r\n                            idx === pagesQty - 1 ? (\r\n                                currentPage === idx + 1 ? (\r\n                                    <span className={styles.currentPage}>\r\n                                        {idx + 1}\r\n                                    </span>\r\n                                ) : (\r\n                                    <button\r\n                                        onClick={() =>\r\n                                            handleSelectPage(idx + 1)\r\n                                        }\r\n                                        className={styles.otherPage}\r\n                                        key={'pageBtn' + idx}\r\n                                        style={btnStyle}\r\n                                    >\r\n                                        {idx + 1}\r\n                                    </button>\r\n                                )\r\n                            ) : (\r\n                                (currentPage - 3 === idx + 1 ||\r\n                                    currentPage + 3 === idx + 1 ||\r\n                                    (currentPage <= 2 && idx === 5) ||\r\n                                    (currentPage >= pagesQty - 2 &&\r\n                                        idx > pagesQty - 7)) && (\r\n                                    <span className={styles.currentPage}>\r\n                                        ...\r\n                                    </span>\r\n                                )\r\n                            )}\r\n                        </Fragment>\r\n                    ))}\r\n\r\n                    <button\r\n                        className={\r\n                            currentPage === pagesQty ? styles.disabled : ''\r\n                        }\r\n                        onClick={() => handleNavPage(1)}\r\n                        style={btnStyle}\r\n                    >\r\n                        {nextTxt ?? 'next'}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            {infosShown && (\r\n                <Modal\r\n                    overlay={true}\r\n                    close={showModal}\r\n                    confirm={showModal}\r\n                    message={infosSelected}\r\n                    fSize={fSize}\r\n                    fFam={fFam}\r\n                    fCol={tableFCol}\r\n                    bordC={tBordC}\r\n                    bordR={tBordR}\r\n                    bordW={tBordW}\r\n                    bg={background}\r\n                    lineHeight=\"1,5\"\r\n                />\r\n            )}\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Table\r\n"],"names":["styleInject","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","Modal","props","isHover","setIsHover","useState","message","label","confirm","close","overlay","fFam","fSize","fCol","bg","pad","width","bordW","bordC","bordR","lineHeight","bfSize","bfFam","bfCol","bbg","bpad","bwidth","bbordW","bbordC","bbordR","hoverBg","hoverCol","modalStyle","background","padding","borderWidth","borderColor","borderRadius","messageContainerStyle","btnStyle","_a","fontFamily","fontSize","color","_b","React","className","styles","onClick","map","mess","idx","key","onMouseEnter","onMouseLeave","Dropdown","selectItem","items","currentValue","dataName","dataLabel","height","textAlign","underline","lBg","lWidth","lHeight","lBordW","lBordC","lBordR","greyLine","itemPad","wrapperStyle","borderBottom","listStyle","hegiht","valueStyle","eltStyle","grayed","isDropped","setIsDropped","item","toString","handleSelect","Object","assign","title","headingNames","data","closeUp","tBordW","tBordC","tBordR","tableFCol","prevTxt","nextTxt","buttonEllipsis","headings","keys","forEach","displayedData","setDisplayedData","sortedData","setSortedData","sortedKey","setSortedKey","asc","useEffect","tmpData","sort","a","b","displayingQty","setDisplayingQty","currentPage","setCurrentPage","pagesQty","setPagesQty","Math","ceil","length","handleNavPage","dir","tempPage","ellipsis","searchInput","setSearchInput","dataSearching","word","searchedWord","toLowerCase","tempData","match","myData","push","infosSelected","setInfosSelected","infosShown","setInfosShown","openOverlay","showModal","globalStyle","tableStyle","lineStyle","cursor","_id","value","htmlFor","name","id","onInput","e","target","scope","handleSort","prevSortedKey","rowIdx","tmpArray","keyData","handleClick","colIdx","Array","from","_","Fragment","abs","handleSelectPage"],"mappings":"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","x_google_ignoreList":[0]}