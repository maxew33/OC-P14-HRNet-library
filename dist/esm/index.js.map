{"version":3,"file":"index.js","sources":["../../node_modules/style-inject/dist/style-inject.es.js","../../src/components/Modal/Modal.tsx","../../src/components/Dropdown/Dropdown.tsx","../../src/components/Table/Table.tsx"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import React, { FormEvent, useState } from 'react'\r\n\r\nimport styles from './Modal.module.css'\r\n\r\ninterface ModalProps {\r\n    message?: string[]\r\n    label?: string\r\n    confirm?: (e: FormEvent) => void\r\n    close?: (e: FormEvent) => void\r\n\r\n    overlay?: boolean\r\n    fFam?: string\r\n    fSize?: string\r\n    fCol?: string\r\n\r\n    bg?: string\r\n    pad?: string\r\n    width?: string\r\n    bordW?: string\r\n    bordC?: string\r\n    bordR?: string\r\n\r\n    bfFam?: string\r\n    bfSize?: string\r\n    bfCol?: string\r\n    bbg?: string\r\n    bpad?: string\r\n    bwidth?: string\r\n    bbordW?: string\r\n    bbordC?: string\r\n    bbordR?: string\r\n    hoverBg?: string\r\n    hoverCol?: string\r\n}\r\n\r\nconst Modal: React.FC<ModalProps> = (props) => {\r\n    const [isHover, setIsHover] = useState(false)\r\n\r\n    const {\r\n        message,\r\n        label,\r\n        confirm,\r\n        close,\r\n        overlay,\r\n        fFam,\r\n        fSize,\r\n        fCol,\r\n        bg,\r\n        pad,\r\n        width,\r\n        bordW,\r\n        bordC,\r\n        bordR,\r\n        bfSize,\r\n        bfFam,\r\n        bfCol,\r\n        bbg,\r\n        bpad,\r\n        bwidth,\r\n        bbordW,\r\n        bbordC,\r\n        bbordR,\r\n        hoverBg,\r\n        hoverCol,\r\n    } = props\r\n\r\n    const modalStyle = {\r\n        background: bg,\r\n        padding: pad,\r\n        width: width,\r\n        borderWidth: bordW,\r\n        borderColor: bordC,\r\n        borderRadius: bordR,\r\n    }\r\n\r\n    const btnStyle = {\r\n        background: isHover ? hoverBg ?? bbg ?? bg : bbg ?? bg,\r\n        fontFamily: bfFam ?? fFam,\r\n        fontSize: bfSize ?? fSize,\r\n        color: isHover ? hoverCol ?? bfCol ?? fCol : bfCol ?? fCol,\r\n        padding: bpad ?? pad,\r\n        borderWidth: bbordW ?? bordW,\r\n        borderColor: bbordC ?? bordC,\r\n        borderRadius: bbordR ?? bordR,\r\n        width: bwidth,\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={overlay ? styles.overlay : ''}\r\n            style={{ fontFamily: fFam, fontSize: fSize, color: fCol }}\r\n        >\r\n            <div className={styles.modal} style={modalStyle}>\r\n                {close && (\r\n                    <button className={styles.closeBtn} onClick={close} style={{color: fCol}}>\r\n                        âœ•\r\n                    </button>\r\n                )}\r\n                {message && (\r\n                    <div className={styles.messagesContainer}>\r\n                        {message.map((mess, idx) => (\r\n                            <div key={'mess' + idx} className={styles.message}>\r\n                                {mess}\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                )}\r\n\r\n                {confirm && (\r\n                    <button\r\n                        className={styles.confirmBtn}\r\n                        onClick={confirm}\r\n                        style={btnStyle}\r\n                        onMouseEnter={() => setIsHover(true)}\r\n                        onMouseLeave={() => setIsHover(false)}\r\n                    >\r\n                        {label ?? 'OK'}\r\n                    </button>\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Modal","import React, { useState } from 'react'\r\nimport styles from './Dropdown.module.css'\r\n\r\ninterface DropdownProps {\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    selectItem: (name: string, value: any) => void\r\n    items: (number | string)[]\r\n    currentValue?: string | number | null\r\n    dataName?: string\r\n    dataLabel?: string\r\n\r\n    width?: string\r\n    height?: string\r\n    fFam?: string\r\n    fSize?: string\r\n    fCol?: string\r\n    textAlign?: 'center' | 'right' | 'left'\r\n    underline?: boolean\r\n\r\n    lBg?: string\r\n    lWidth?: string\r\n    lHeight?: string\r\n    lBordW?: string\r\n    lBordC?: string\r\n    lBordR?: string\r\n    greyLine?: boolean\r\n    itemPad?: string\r\n}\r\n\r\nconst Dropdown: React.FC<DropdownProps> = (props) => {\r\n    const {\r\n        selectItem,\r\n        items,\r\n        currentValue,\r\n        dataName,\r\n        dataLabel,\r\n\r\n        width,\r\n        height,\r\n        fFam,\r\n        fSize,\r\n        fCol,\r\n        textAlign,\r\n        underline,\r\n\r\n        lBg,\r\n        lWidth,\r\n        lHeight,\r\n        lBordW,\r\n        lBordC,\r\n        lBordR,\r\n\r\n        greyLine,\r\n        itemPad,\r\n    } = props\r\n\r\n    const line = underline ?? 'true'\r\n\r\n    const wborder = line\r\n        ? `${lBordW ?? '2px'} solid ${lBordC ?? 'black'}`\r\n        : 'none'\r\n\r\n    const wrapperStyle = {\r\n        fontFamily: fFam,\r\n        fontSize: fSize,\r\n        color: fCol,\r\n        width: width,\r\n        height: height,\r\n        borderBottom: wborder,\r\n    }\r\n\r\n    const listStyle = {\r\n        background: lBg,\r\n        width: lWidth,\r\n        hegiht: lHeight,\r\n        borderWidth: lBordW,\r\n        borderColor: lBordC,\r\n        borderRadius: lBordR,\r\n        color: fCol,\r\n    }\r\n\r\n    const valueStyle = {\r\n        textAlign: textAlign,\r\n        color: fCol,\r\n    }\r\n\r\n    const eltStyle = {\r\n        padding: itemPad,\r\n    }\r\n\r\n    const grayed = greyLine ?? true\r\n\r\n    const [isDropped, setIsDropped] = useState(false)\r\n\r\n    const handleClick = () => {\r\n        setIsDropped(!isDropped)\r\n    }\r\n\r\n    const handleSelect = (item: string | number) => {\r\n        selectItem(dataName ?? '', item.toString())\r\n        setIsDropped(false)\r\n    }\r\n\r\n    return (\r\n        <div className={styles.dropdown} style={wrapperStyle}>\r\n            {dataLabel && <div>{dataLabel} :</div>}\r\n            <div\r\n                className={\r\n                    styles.value + ' ' + (isDropped ? styles.dropped : '')\r\n                }\r\n                onClick={handleClick}\r\n                style={valueStyle}\r\n            >\r\n                {currentValue ?? 'select'}\r\n\r\n                {isDropped && (\r\n                    <ul className={styles.list} style={listStyle}>\r\n                        {items.map((item, key) => (\r\n                            <li\r\n                                key={'li' + key}\r\n                                onClick={() => handleSelect(item)}\r\n                                style={{\r\n                                    ...eltStyle,\r\n                                    ...(grayed\r\n                                        ? key % 2 === 0\r\n                                            ? { background: '#d9d9d9bb' }\r\n                                            : {}\r\n                                        : {}),\r\n                                }}\r\n                            >\r\n                                {item}\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dropdown","/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport React, { FormEvent, Fragment, useEffect, useState } from 'react'\r\nimport Dropdown from '../Dropdown'\r\nimport styles from './Table.module.css'\r\nimport Modal  from '../Modal'\r\n\r\ninterface TableProps {\r\n    title?: string\r\n    headingNames?: { [key: string]: string } | null\r\n    data: { [key: string]: string | number }[]\r\n    closeUp?: boolean\r\n    background?: string\r\n\r\n    width?: string\r\n    fFam?: string\r\n    fSize?: string\r\n    fCol?: string\r\n\r\n    tableFCol?: string    \r\n    tBordW?: string\r\n    tBordC?: string\r\n    tBordR?: string\r\n\r\n    greyLine?: boolean\r\n\r\n    prevTxt?: string\r\n    nextTxt?: string\r\n    buttonEllipsis?: boolean\r\n}\r\n\r\nexport const Table: React.FC<TableProps> = (props) => {\r\n    const { \r\n        title, \r\n        headingNames, \r\n        data, \r\n        closeUp, \r\n        background,\r\n        tBordW, \r\n        tBordC, \r\n        tBordR, \r\n        width, \r\n        fFam, \r\n        fSize,\r\n        fCol, \r\n        tableFCol,\r\n        greyLine, \r\n        prevTxt,\r\n        nextTxt, \r\n        buttonEllipsis } = props\r\n\r\n    // ========================================\r\n    // check if headingNames keys and data keys are the same\r\n    // ========================================\r\n\r\n    let namesGiven = headingNames ? Object.values(headingNames) : null\r\n\r\n    const dataKeys: string[] = Object.keys(data[0])\r\n\r\n    const headings: { [key: string]: string } = {}\r\n\r\n    if (headingNames) {\r\n        const dataKeysToCompare = data.length > 0 ? dataKeys : []\r\n\r\n        const missingKeys = Object.keys(headingNames).filter(\r\n            (key) => !dataKeysToCompare.includes(key)\r\n        )\r\n\r\n        if (missingKeys.length > 0) {\r\n            namesGiven = null\r\n            console.warn(\r\n                `Key${missingKeys.length > 2 ? 's' : ''} ${missingKeys.join(\r\n                    ', '\r\n                )} ${\r\n                    missingKeys.length > 2 ? 'are' : 'is'\r\n                } missing in the heading names objects given. Data keys will be used instead.`\r\n            )\r\n        }\r\n    }\r\n\r\n    // get the table colmuns heading name\r\n    const headingNamesGot = namesGiven || dataKeys\r\n\r\n    dataKeys.forEach((data, idx) => {\r\n        headings[data] = headingNamesGot[idx]\r\n    })\r\n\r\n    // ========================================\r\n    // sort data by clicking on the table header\r\n    // ========================================\r\n\r\n    const [displayedData, setDisplayedData] = useState(data)\r\n\r\n    const [sortedData, setSortedData] = useState(displayedData)\r\n\r\n    const [sortedKey, setSortedKey] = useState({ key: '', asc: false })\r\n\r\n    const handleSort = (key: string) => {\r\n        // get the column key\r\n        setCurrentPage(1)\r\n\r\n        sortedKey.key === key\r\n            ? setSortedKey((prevSortedKey) => ({\r\n                  ...prevSortedKey,\r\n                  asc: !prevSortedKey.asc,\r\n              }))\r\n            : setSortedKey({ key: key, asc: false })\r\n    }\r\n\r\n    useEffect(() => {\r\n        const tmpData = [...displayedData].sort((a: any, b: any) => {\r\n            if (a[sortedKey.key] > b[sortedKey.key])\r\n                return sortedKey.asc ? 1 : -1\r\n            if (a[sortedKey.key] < b[sortedKey.key])\r\n                return sortedKey.asc ? -1 : 1\r\n            return 0\r\n        })\r\n\r\n        setSortedData(tmpData)\r\n    }, [sortedKey, displayedData])\r\n\r\n    // ========================================\r\n    // number of entries shown\r\n    // ========================================\r\n\r\n    const [displayingQty, setDisplayingQty] = useState(10)\r\n\r\n    const handleSelectQty = (_id: string, value: number) => {\r\n        setDisplayingQty(value)\r\n        setCurrentPage(1)\r\n    }\r\n\r\n    // ========================================\r\n    // Page navigation\r\n    // ========================================\r\n\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [pagesQty, setPagesQty] = useState(0)\r\n\r\n    useEffect(() => {\r\n        setPagesQty(Math.ceil(displayedData.length / displayingQty))\r\n        console.log(pagesQty)\r\n    }, [displayingQty, displayedData, pagesQty])\r\n\r\n    const handleSelectPage = (idx: number) => {\r\n        setCurrentPage(idx)\r\n    }\r\n\r\n    // navigation form prev / next button\r\n    const handleNavPage = (dir: number) => {\r\n        let tempPage = currentPage\r\n        tempPage += dir\r\n        tempPage > 0 && tempPage <= pagesQty && setCurrentPage(tempPage)\r\n    }\r\n\r\n    const ellipsis = buttonEllipsis ?? 'true'\r\n\r\n    // ========================================\r\n    // Searchbar\r\n    // ========================================\r\n\r\n    const [searchInput, setSearchInput] = useState('')\r\n\r\n    const handleInput = (e: FormEvent) => {\r\n        const target = e.target as HTMLFormElement\r\n        setCurrentPage(1)\r\n        setSearchInput(target.value)\r\n    }\r\n\r\n    useEffect(() => {\r\n        dataSearching(searchInput.toString())\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [searchInput])\r\n\r\n    const dataSearching = (word: string) => {\r\n        const searchedWord = word.toLowerCase()\r\n\r\n        const tempData: React.SetStateAction<{ [key: string]: any }[]> = []\r\n\r\n        props.data.forEach((data) => {\r\n            const keys: string[] = Object.keys(data)\r\n            let match = false\r\n            keys.forEach((key) => {\r\n                if (!match) {\r\n                    const wordToCompare = data[key].toString().toLowerCase()\r\n                    if (wordToCompare.match(searchedWord)) {\r\n                        tempData.push(data)\r\n                        match = true\r\n                    }\r\n                }\r\n            })\r\n        })\r\n\r\n        setDisplayedData(tempData)\r\n    }\r\n\r\n    // ========================================\r\n    // closeUp : get infos by clicking on the line\r\n    // ========================================\r\n\r\n    const [infosSelected, setInfosSelected] = useState([''])\r\n\r\n    const [infosShown, setInfosShown] = useState(false)\r\n\r\n    const openOverlay = closeUp ?? true\r\n\r\n    const handleClick = (data: any) => {\r\n        const tmpArray: any[] = []\r\n\r\n        {\r\n            dataKeys.map((key) =>\r\n                tmpArray.push(key + ': ' + data[key as keyof typeof data])\r\n            )\r\n        }\r\n\r\n        setInfosSelected(tmpArray)\r\n\r\n        showModal()\r\n    }\r\n\r\n    const showModal = () => {\r\n        setInfosShown(!infosShown)\r\n    }\r\n\r\n    // ========================================\r\n    // custom style\r\n    // ========================================\r\n\r\n    const grayed = greyLine ?? 'true'\r\n\r\n    const globalStyle = {\r\n        fontFamily: fFam,\r\n        color: fCol,\r\n        fontSize: fSize\r\n    }\r\n\r\n    const tableStyle = {\r\n        width : width,\r\n        borderWidth: tBordW,\r\n        borderColor: tBordC,\r\n        borderRadius: tBordR,        \r\n        background: background,\r\n        color: tableFCol,\r\n    }\r\n\r\n    const lineStyle = {\r\n        cursor: openOverlay ? 'pointer' : 'default',\r\n    }\r\n\r\n    const btnStyle = {\r\n        color: tableFCol,\r\n        fontSize: fSize,\r\n        background: background\r\n    }\r\n\r\n    return (\r\n        <section className={styles.section} style={globalStyle}>\r\n            <div className={styles.entriesDisplayed}>\r\n                <span className={styles.dropdown}>\r\n                    Show\r\n                    <Dropdown\r\n                        items={[10, 25, 50, 100]}\r\n                        selectItem={handleSelectQty}\r\n                        currentValue={displayingQty.toString()}\r\n                        width=\"75px\"\r\n                        textAlign='center'\r\n                        fCol={fCol}\r\n                        fSize={fSize}\r\n                        fFam={fFam}\r\n                    />\r\n                    entries\r\n                </span>\r\n                <form className={styles.form}>\r\n                    search\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"\"\r\n                        id=\"\"\r\n                        value={searchInput}\r\n                        onInput={handleInput}\r\n                    />\r\n                </form>\r\n            </div>\r\n\r\n            <table className={styles.table}>\r\n                <caption>{title ?? ''}</caption>\r\n                <tbody style={tableStyle}>\r\n                    <tr>\r\n                        {Object.keys(headings).map((name: string, idx) => (\r\n                            <th\r\n                                scope=\"col\"\r\n                                key={'col' + idx}\r\n                                onClick={() => handleSort(name)}\r\n                                className={styles.heading}\r\n                            >\r\n                                {headings[name]}{' '}\r\n                                {name === sortedKey.key &&\r\n                                    (sortedKey.asc ? 'â–²' : 'â–¼')}\r\n                            </th>\r\n                        ))}\r\n                    </tr>\r\n                    {sortedData.map(\r\n                        (data, rowIdx) =>\r\n                            rowIdx >= (currentPage - 1) * displayingQty &&\r\n                            rowIdx < currentPage * displayingQty && (\r\n                                <tr\r\n                                    key={'row' + rowIdx + 1}\r\n                                    onClick={() =>\r\n                                        openOverlay && handleClick(data)\r\n                                    }\r\n                                    className={grayed? styles.grayed:''}\r\n                                    style={lineStyle}\r\n                                >\r\n                                    {dataKeys.map((key, colIdx) => (\r\n                                        <td\r\n                                            scope=\"col\"\r\n                                            key={\r\n                                                'row' + rowIdx + 'col' + colIdx\r\n                                            }\r\n                                        >\r\n                                            {data[key as keyof typeof data]}\r\n                                        </td>\r\n                                    ))}\r\n                                </tr>\r\n                            )\r\n                    )}\r\n                </tbody>\r\n            </table>\r\n\r\n            <div className={styles.tableNavigation}>\r\n                <span>\r\n                    Showing {(currentPage - 1) * displayingQty + 1} to{' '}\r\n                    {currentPage === pagesQty\r\n                        ? displayedData.length\r\n                        : currentPage * displayingQty}{' '}\r\n                    of {displayedData.length} entries\r\n                </span>\r\n                <div className={styles.pageSelection}>\r\n                    <button\r\n                        className={currentPage === 1 ? styles.disabled : ''}\r\n                        onClick={() => handleNavPage(-1)}\r\n                        style={btnStyle}\r\n                    >\r\n                        {prevTxt ?? 'prev'}\r\n                    </button>\r\n\r\n                    {/* page selection */}\r\n\r\n                    {Array.from(Array(pagesQty)).map((_, idx) => (\r\n                        <Fragment key={'pageNavigation' + idx}>\r\n                            {!ellipsis \r\n                            || \r\n                            pagesQty < 7 \r\n                            ||\r\n                            Math.abs(currentPage - idx - 1) < 3 \r\n                            ||\r\n                            (currentPage <= 2 && idx <= 4) \r\n                            ||\r\n                            (currentPage >= pagesQty - 2 &&\r\n                                idx > pagesQty - 6) \r\n                            ||\r\n                            idx === 0 \r\n                            ||\r\n                            idx === pagesQty - 1 ? (\r\n                                currentPage === idx + 1 ? (\r\n                                    <span className={styles.currentPage}>\r\n                                        {idx + 1}\r\n                                    </span>\r\n                                ) : (\r\n                                    <button\r\n                                        onClick={() =>\r\n                                            handleSelectPage(idx + 1)\r\n                                        }\r\n                                        className={styles.otherPage}\r\n                                        key={'pageBtn' + idx}\r\n                                        style={btnStyle}\r\n                                    >\r\n                                        {idx + 1}\r\n                                    </button>\r\n                                )\r\n                            ) : (\r\n                                (currentPage - 3 === idx + 1 ||\r\n                                    currentPage + 3 === idx + 1 ||\r\n                                    (currentPage <= 2 && idx === 5) ||\r\n                                    (currentPage >= pagesQty - 2 &&\r\n                                        idx > pagesQty - 7)) && (\r\n                                    <span className={styles.currentPage}>\r\n                                        ...\r\n                                    </span>\r\n                                )\r\n                            )}\r\n                        </Fragment>\r\n                    ))}\r\n\r\n                    <button\r\n                        className={\r\n                            currentPage === pagesQty ? styles.disabled : ''\r\n                        }\r\n                        onClick={() => handleNavPage(1)}\r\n                        style={btnStyle}\r\n                    >\r\n                        {nextTxt ?? 'next'}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            {infosShown && (\r\n                <Modal\r\n                    overlay={true}\r\n                    close={showModal}\r\n                    confirm={showModal}\r\n                    message={infosSelected}\r\n                    fSize={fSize}\r\n                    fFam={fFam}\r\n                    fCol={tableFCol}\r\n                    bordC={tBordC}\r\n                    bordR={tBordR}\r\n                    bordW={tBordW}\r\n                    bg={background}\r\n                />\r\n            )}\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Table"],"names":["styleInject","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","Modal","props","isHover","setIsHover","useState","message","label","confirm","close","overlay","fFam","fSize","fCol","bg","pad","width","bordW","bordC","bordR","bfSize","bfFam","bfCol","bbg","bpad","bwidth","bbordW","bbordC","bbordR","hoverBg","hoverCol","modalStyle","background","padding","borderWidth","borderColor","borderRadius","btnStyle","_a","fontFamily","fontSize","color","_b","React","className","styles","onClick","map","mess","idx","key","onMouseEnter","onMouseLeave","Dropdown","selectItem","items","currentValue","dataName","dataLabel","height","textAlign","underline","lBg","lWidth","lHeight","lBordW","lBordC","lBordR","greyLine","itemPad","wrapperStyle","borderBottom","listStyle","hegiht","valueStyle","eltStyle","grayed","isDropped","setIsDropped","item","toString","handleSelect","Object","assign","Table","title","headingNames","data","closeUp","tBordW","tBordC","tBordR","tableFCol","prevTxt","nextTxt","buttonEllipsis","namesGiven","values","dataKeys","keys","headings","dataKeysToCompare","length","missingKeys","filter","includes","console","warn","join","headingNamesGot","forEach","displayedData","setDisplayedData","sortedData","setSortedData","sortedKey","setSortedKey","asc","useEffect","tmpData","sort","a","b","displayingQty","setDisplayingQty","currentPage","setCurrentPage","pagesQty","setPagesQty","Math","ceil","log","handleNavPage","dir","tempPage","ellipsis","searchInput","setSearchInput","dataSearching","word","searchedWord","toLowerCase","tempData","match","push","infosSelected","setInfosSelected","infosShown","setInfosShown","openOverlay","showModal","globalStyle","tableStyle","lineStyle","cursor","_id","value","name","id","onInput","e","target","scope","handleSort","prevSortedKey","rowIdx","tmpArray","handleClick","colIdx","Array","from","_","Fragment","abs","handleSelectPage"],"mappings":"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","x_google_ignoreList":[0]}