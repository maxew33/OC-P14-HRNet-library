{"version":3,"file":"index.js","sources":["../../node_modules/style-inject/dist/style-inject.es.js","../../src/components/Modal/Modal.tsx","../../src/components/Dropdown/Dropdown.tsx","../../src/components/Table/Table.tsx"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import React, { FormEvent, useState } from 'react'\r\nimport styles from './Modal.module.css'\r\n\r\ninterface ModalProps {\r\n    message?: string\r\n    label?: string\r\n    confirm: (e: FormEvent) => void\r\n}\r\n\r\nconst Modal: React.FC<ModalProps> = (props) => {\r\n\r\n    return (\r\n        <div className={styles.test}>\r\n            <div className=\"confirm-modal-wrapper\">\r\n                {props.message} \r\n                <button className=\"create-btn\" onClick={props.confirm}>\r\n                    {props.label ?? 'OK'}\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Modal","import React, { useState } from 'react'\r\n\r\ninterface DropdownProps {\r\n    currentValue?: string | number | null\r\n    items: (number | string)[]\r\n    dataName?: string\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    selectItem: (id: string, value: any) => void\r\n}\r\n\r\nconst Dropdown: React.FC<DropdownProps> = (props) => {\r\n    \r\n    const [isDropped, setIsDropped] = useState(false)\r\n\r\n    const handleClick = () => {\r\n        setIsDropped(!isDropped)\r\n    }\r\n\r\n    const handleSelect = (item: string | number) => {\r\n        props.selectItem(props.dataName ?? '', item.toString())\r\n        setIsDropped(false)\r\n    }\r\n\r\n    return (\r\n        <div className=\"dropdown\">\r\n            {props.dataName && <div>{props.dataName} :</div>}\r\n            <div\r\n                className={'value' + (isDropped ? ' dropped' : '')}\r\n                onClick={handleClick}\r\n            >\r\n                {props.currentValue ?? 'select'}\r\n\r\n                {isDropped && (\r\n                    <ul className=\"list\">\r\n                        {props.items.map((item, key) => (\r\n                            <li key={key} onClick={() => handleSelect(item)}>\r\n                                {item}\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dropdown\r\n","import React, { FormEvent, useEffect, useState } from 'react'\r\nimport Dropdown from '../Dropdown'\r\n\r\ninterface TableProps {\r\n    title?: string\r\n    headingNames?: { [key: string]: string } | null\r\n    data: {[key: string]: string | number }[]\r\n}\r\n\r\nexport const Table: React.FC<TableProps> = (props) => {\r\n\r\n    const { title, headingNames, data} = props\r\n\r\n    // ========================================\r\n    // check if headingNames keys and data keys are the same\r\n    // ========================================\r\n\r\n    let namesGiven = headingNames ? Object.values(headingNames) : null\r\n\r\n    const dataKeys: string[] = Object.keys(data[0])\r\n\r\n    const headings: { [key: string]: string } = {}\r\n\r\n    if (headingNames) {\r\n        const dataKeysToCompare = data.length > 0 ? dataKeys : []\r\n\r\n        const missingKeys = Object.keys(headingNames).filter(\r\n            (key) => !dataKeysToCompare.includes(key)\r\n        )\r\n\r\n        if (missingKeys.length > 0) {\r\n            namesGiven = null\r\n            console.warn(\r\n                `Key${missingKeys.length > 2 ? 's' : ''} ${missingKeys.join(\r\n                    ', '\r\n                )} ${\r\n                    missingKeys.length > 2 ? 'are' : 'is'\r\n                } missing in the heading names objects given. Data keys will be used instead.`\r\n            )\r\n        }\r\n    }\r\n\r\n    //get the table colmuns heading name\r\n    const headingNamesGot = namesGiven || dataKeys\r\n\r\n    dataKeys.forEach((data, idx) => {\r\n        headings[data] = headingNamesGot[idx]\r\n    })\r\n\r\n    // ========================================\r\n    // sort data by clicking on the table header\r\n    // ========================================\r\n\r\n    const [displayedData, setDisplayedData] = useState(data)\r\n\r\n    const [sortedData, setSortedData] = useState(displayedData)\r\n\r\n    const [sortedKey, setSortedKey] = useState({ key: '', asc: false })\r\n\r\n    const handleSort = (key: string) => {\r\n        // get the column key\r\n        setCurrentPage(1)\r\n\r\n        sortedKey.key === key\r\n            ? setSortedKey((prevSortedKey) => ({\r\n                  ...prevSortedKey,\r\n                  asc: !prevSortedKey.asc,\r\n              }))\r\n            : setSortedKey({ key: key, asc: false })\r\n    }\r\n\r\n    useEffect(() => {\r\n        const tmpData = [...displayedData].sort((a: any , b: any) => {\r\n            if (a[sortedKey.key] > b[sortedKey.key])\r\n                return sortedKey.asc ? 1 : -1\r\n            if (a[sortedKey.key] < b[sortedKey.key])\r\n                return sortedKey.asc ? -1 : 1\r\n            return 0\r\n        })\r\n\r\n        setSortedData(tmpData)\r\n    }, [sortedKey, displayedData])\r\n\r\n    // ========================================\r\n    // number of entries shown\r\n    // ========================================\r\n\r\n    const [displayingQty, setDisplayingQty] = useState(10)\r\n    \r\n    const handleSelectQty = (_id: string, value: number) => {\r\n        setDisplayingQty(value)\r\n    }\r\n   // ========================================\r\n    // Page navigation\r\n    // ========================================\r\n\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [pagesQty, setPagesQty] = useState(0)\r\n\r\n    useEffect(() => {\r\n        setPagesQty(Math.ceil(displayedData.length / displayingQty))\r\n        console.log(pagesQty)\r\n    }, [displayingQty, displayedData, pagesQty])\r\n\r\n    const handleSelectPage = (idx: number) => {\r\n        setCurrentPage(idx)\r\n    }\r\n\r\n    // navigation form prev / next button\r\n    const handleNavPage = (dir: number) => {\r\n        let tempPage = currentPage\r\n        tempPage += dir\r\n        tempPage > 0 && tempPage <= pagesQty && setCurrentPage(tempPage)\r\n    }\r\n\r\n    // ========================================\r\n    // Searchbar\r\n    // ========================================\r\n\r\n    const [searchInput, setSearchInput] = useState('')\r\n\r\n    const handleInput = (e: FormEvent) => {\r\n        const target = e.target as HTMLFormElement\r\n        setCurrentPage(1)\r\n        setSearchInput(target.value)\r\n    }\r\n\r\n    useEffect(()=> {\r\n        dataSearching(searchInput.toString())\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [searchInput])\r\n\r\n    const dataSearching = (word: string) => {\r\n\r\n        const searchedWord = word.toLowerCase()\r\n\r\n        const tempData: React.SetStateAction<{ [key: string]: any }[]> = []\r\n\r\n        props.data.forEach((data) => {\r\n            const keys : string[] = Object.keys(data)\r\n            let match = false\r\n            keys.forEach((key) => {\r\n                if(!match){\r\n                    const wordToCompare = data[key].toString().toLowerCase()\r\n                    if(wordToCompare.match(searchedWord)){\r\n                        tempData.push(data)\r\n                        match = true\r\n                    }\r\n                }\r\n        })}\r\n        )\r\n\r\n        setDisplayedData(tempData)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <span>\r\n                    Show\r\n                    <Dropdown\r\n                        items={[10, 25, 50, 100]}\r\n                        selectItem={handleSelectQty}\r\n                        currentValue={displayingQty.toString()}\r\n                    />\r\n                    entries\r\n                </span>\r\n                <form>\r\n                    search\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"\"\r\n                        id=\"\"\r\n                        value={searchInput}\r\n                        onInput={handleInput}\r\n                    />\r\n                </form>\r\n            </div>\r\n            <table>\r\n                <caption>{title ?? ''}</caption>\r\n                <tbody>\r\n                    <tr>\r\n                        {Object.keys(headings).map((name: string, idx) => (\r\n                            <th\r\n                                scope=\"col\"\r\n                                key={'col' + idx}\r\n                                onClick={() => handleSort(name)}\r\n                            >\r\n                                {headings[name]}{' '}\r\n                                {name === sortedKey.key &&\r\n                                    (sortedKey.asc ? '▲' : '▼')}\r\n                            </th>\r\n                        ))}\r\n                    </tr>\r\n                    {sortedData.map(\r\n                        (data, rowIdx) =>\r\n                            rowIdx >= (currentPage - 1) * displayingQty &&\r\n                            rowIdx < currentPage * displayingQty && (\r\n                                <tr key={'row' + rowIdx + 1}>\r\n                                    {dataKeys.map((key, colIdx) => (\r\n                                        <th\r\n                                            scope=\"col\"\r\n                                            key={\r\n                                                'row' + rowIdx + 'col' + colIdx\r\n                                            }\r\n                                        >\r\n                                            {data[key as keyof typeof data]}\r\n                                        </th>\r\n                                    ))}\r\n                                </tr>\r\n                            )\r\n                    )}\r\n                </tbody>\r\n            </table>\r\n            <div className=\"\">\r\n                <span>\r\n                    Showing {(currentPage - 1) * displayingQty + 1} to{' '}\r\n                    {currentPage === pagesQty\r\n                        ? displayedData.length\r\n                        : currentPage * displayingQty}{' '}\r\n                    of {displayedData.length} entries\r\n                </span>\r\n                <div>\r\n                    <button onClick={() => handleNavPage(-1)}>prev</button>\r\n                    {Array.from(Array(pagesQty)).map((_, idx) => (\r\n                        <span key={'pageNavigation' + idx}>\r\n                            {currentPage === idx + 1 ? (\r\n                                <span>{idx + 1}</span>\r\n                            ) : (\r\n                                <button\r\n                                    onClick={() => handleSelectPage(idx + 1)}\r\n                                    key={'pageBtn' + idx}\r\n                                >\r\n                                    {idx + 1}\r\n                                </button>\r\n                            )}\r\n                        </span>\r\n                    ))}\r\n                    <button onClick={() => handleNavPage(1)}>next</button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Table"],"names":["css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","Modal","props","React","className","styles","message","onClick","confirm","label","_a","Dropdown","isDropped","setIsDropped","useState","dataName","currentValue","items","map","item","key","selectItem","toString","handleSelect","Table","title","headingNames","data","namesGiven","Object","values","dataKeys","keys","headings","dataKeysToCompare","length","missingKeys","filter","includes","console","warn","join","headingNamesGot","forEach","idx","displayedData","setDisplayedData","sortedData","setSortedData","sortedKey","setSortedKey","asc","useEffect","tmpData","sort","a","b","displayingQty","setDisplayingQty","currentPage","setCurrentPage","pagesQty","setPagesQty","Math","ceil","log","handleNavPage","dir","tempPage","searchInput","setSearchInput","dataSearching","word","searchedWord","toLowerCase","tempData","match","push","Fragment","_id","value","name","id","onInput","e","target","scope","handleSort","prevSortedKey","assign","rowIdx","colIdx","Array","from","_","handleSelectPage"],"mappings":"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","x_google_ignoreList":[0]}